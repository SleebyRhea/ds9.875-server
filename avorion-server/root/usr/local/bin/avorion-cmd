#!/usr/bin/env bash

CMDVERS='2.0-testing rev3'
CMDNAME="$(basename "$0")"
EDATE="$(date +%s)"
VERBOSE=0
NOSCREENCHECK=0
FORCE=0
CRON=0

# bool __check_requirements <void>
#	Checks required software versions and exits if either
#	the required software is not present in $PATH or if it
#	does not meet the minimum version requirements.
function __check_requirements () {
	local -A _requires
	local _prog _arg _string
	
	# Required version strings, prepended with the argument
	# that will invoke them.
	_requires[sed]='--version=^sed \(GNU sed\) [0-9]{0,1}[4-9].*'
	_requires[bash]='--version=^GNU bash, version [0-9]{0,1}[4-9].*'
	_requires[tmux]='skip'
	_requires[mktemp]='skip'

	for _prog in "${!_requires[@]}"; do
		_arg="${_requires["$_prog"]%%=*}"
		_string="${_requires["$_prog"]##*=}"

		command -v "$_prog" >/dev/null 2>&1 ||\
			die "${_prog} is required but is either not installed, or not in the execution PATH"

		[[ "${_requires[$_prog]}" == 'skip' ]] &&\
			continue

		[[ "$("$_prog" "$_arg")" =~ $_string ]] ||\
			die "${_prog} doesnt meet the minimum version requirements"
	done
}

# int __validate_process_exec <ARGV>
#	Run various pre-checks prior to running the main
#	script body to ensure that the process execution
#	is both valid, and that all of the required pkgs
#	have been installed. If any of these pre-checks
#	fail, exit the script with error code 1 and give
#	an explanation.
function __assert_valid_execution () {
	__check_requirements

	# Make sure the user is part of the admin group or is root. The 
	# regex is used here to prevent unintentionally matching groups
	# that contain the group string but dont exactly match it. Since
	# root should be able to do anything, we also check for id 0
	if [[ ! "$(groups)" =~ (^$AVORION_ADMIN_GRP | $AVORION_ADMIN_GRP | $AVORION_ADMIN_GRP$) ]] && [[ "$(id -u)" != 0 ]]; then
		die "This command can only be run by a user with the group <${AVORION_ADMIN_GRP}> or by root."
	fi
}

# bool __assert_valid_user_input <string>
#	Check the string given for bash symbols
#	and return error if any are found.
function __assert_valid_user_input () {
	[[ "$1" =~ [/\\\$\&\@\#\`\~\=\+\{\}\[\]\|\'\"] ]] &&\
		return 1 ||\
		return 0
}

# int __validate_setting_conf <void>
#	Run validation checks on the configuration file.
#	This function checks all of the non-blank lines
#	present in the conf file and ensures that they
#	are both valid configs, and that the settings
#	provided are valid.
function __validate_setting_conf () {
	[[ -f /etc/avorionsettings.conf ]] ||\
		die "Avorion configuration file not found"

	local -A __conf_vars
	local __bad_symbols __err
	__bad_symbols="[\\&^s\(\)%\[\]\#@!<>\'\",;:\{\}]"
	__conf_vars[AVORION_ADMIN_GRP]='^[a-z][a-z]*$'
	__conf_vars[AVORION_USER]='^[a-z][a-z]*$'
	__conf_vars[AVORION_SERVICEDIR]='^/[a-zA-Z0-9_\-][a-zA-Z0-9_\-\/]*$'
	__conf_vars[AVORION_BINDIR]='^[a-zA-Z0-9_\-\/][a-zA-Z0-9_\-\/]*$'
	__conf_vars[AVORION_BAKDIR]='^\/[a-zA-Z0-9_\-\/][a-zA-Z0-9_\-\/]*$'
	__conf_vars[AVORION_STEAMID]='^[0-9][0-9]*$'
	__conf_vars[STEAMCMD_BIN]='^(/[a-zA-Z0-9_\-\/][a-zA-Z0-9_\-\/\.]*[a-zA-Z0-9]|steamcmd)$'

	# Leaving this here for now, but this used to check for invalid options
	# being set in the configuration file
	# grep -qcvE "^(($(printf '%s' "${!__conf_vars[*]}" | tr ' ' '|'))=.*|\\s*)" /etc/avorionsettings.conf >/dev/null \
	#	|| return 1

	local i=0
	while read -r __l; do
		# Set current line count
		((i++))
		
		__err="Configuration error on line ${i} of /etc/avorionsettings.conf"
		
		# We dont care about blank lines and comments, so skip those
		[[ "${__l}" =~ ^[[:space:]]*#*$ ]] && continue

		# Ensure the line contains no invalid symbols
		[[ "${__l}" =~ $__bad_symbols ]] &&\
			die "${__err} -- Invalid chars present: <$( printf '%q' "${__l}") >"
		
		# Ensure that the variable declaration syntax is valid.
		# We also use this to assign the captured strings to the
		# BASH_REMATCH environment variable (bash does this automatically)
		[[ "${__l}" =~ ^([^[:space:]][^[:space:]]*)=([^[:space:]][^[:space:]]*)$ ]] ||\
			die "${__err} -- Bad syntax: <$( printf '%q' "${__l}")>"

		# Ensure that the variable being declared is actually
		# a setting that we will be making use of.
		# 
		# NOTE: About the wierd printf '%q' syntax, %q is an option that
		# can be given to the printf Bash builtin that will automatically
		# escape out any special characters. In this context, it is used
		# to prevent special characters from potentially executing. This
		# is also accomplished above, but I am paranoid
		[[ -z "${__conf_vars[$( printf '%q' "${BASH_REMATCH[1]}" )]}" ]] &&\
			die "${__err} -- Invalid setting: <$( printf '%q' "${BASH_REMATCH[1]}" )>"

		# Make sure that the values given to the variable match a
		# set syntax.
		#
		# TODO: Perform some deeper checks here. IE, we would
		#       want to catch things like having the admin group
		#       set to sudo.
		[[ "$( printf '%q' "${BASH_REMATCH[2]}" )" =~ ${__conf_vars[$( printf '%q' "${BASH_REMATCH[1]}" )]} ]] ||\
			die "${__err} -- Invalid assignment: <$( printf '%q' "${__l}")>"

	done < /etc/avorionsettings.conf
	
	return 0
}

# bool __set_tmux_instance <string>
#	Provided a string, verify that the instance
#	is a valid (and active) tmux controlled instance
#	and set the tmux socket and session globals
function __set_tmux_instance () {
	local __skip_active=0
	
	for _arg; do
		shift
		if [[ "$_arg" == '--skip-active-check' ]]; then
			__skip_active=1
			continue
		fi

		set -- "$@" "$_arg"
	done

	## Die if there are no more arguments left
	(( $# > 0 )) || return 1

	# Strip bad chars from user input
	_tmuxsess="$1"
	_tmuxsess="${_tmuxsess//[ _]/\-}"
	_tmuxsess="${_tmuxsess//[^a-zA-Z0-9\-]/}"

	if (( __skip_active > 0 )); then
		return 0
	fi

	# If the instance is either an Avorion instance or a valid service
	# file, then use that and set the tmux session
	if systemctl status --no-pager avorion@"$_tmuxsess" >/dev/null 2>&1; then
		_tmuxsock="${AVORION_SERVICEDIR}/sockets/${_tmuxsess}.sock"
		return 0
	else
		echo "$_tmuxsess is not a valid instance"
		exit 1
	fi
}

# void __set_globals <void>
#	Set various global values, and declare
#	other unset globals
function __set_globals () {
	declare _tmuxsess _tmuxsock _instdir
	
	readonly _clr="$(tput sgr0 2>/dev/null)"		# prevent error spam when there is no $TERM
	readonly _bld="$(tput bold 2>/dev/null)"		# such as when run from systemd unit
	readonly _red="$(tput setaf 1 2>/dev/null)"
	readonly _grn="$(tput setaf 2 2>/dev/null)"
	readonly _yel="$(tput setaf 3 2>/dev/null)"
	readonly _wht="$(tput setaf 7 2>/dev/null)"
	readonly _tmuxconf=/etc/avorioncmd-tmux.conf
	readonly _tmuxcmd="$(which tmux)"
	readonly _regex_sector_arg='^-{0,1}[0-9]{1,3}:-{0,1}[0-9]{1,3}(--{0,1}[0-9]{1,3}:-{0,1}[0-9]{1,3}|)$'
	readonly _regex_sector_num='-{0,1}[0-9]{1,3}'
	readonly TMP_FILE="$(mktemp)"

	if [[ -z "$TMP_FILE" ]]; then
		echo "Cannot generate tmpfile! Check tmp usage."
		exit 1
	elif [[ ! -w "$TMP_FILE" ]]; then
		echo "Cannot write to tmpfile <$TMP_FILE>. Check tmp permissions."
		exit 1
	fi
}

function __start_avorion_instance () {
	local _prompt="Are you certain you wish to start ${_grn}$1${_clr}?"
	local _sess="$1"
	
	## Strip avorion@ and .service for sanity
	_sess="${_sess%%.service}"
	_sess="${_sess##avorion@}"

	if ! systemctl status --no-pager avorion@"$_sess".service >/dev/null 2<&1; then
		if (( FORCE > 0)) || (( CRON > 0 )) || yesno "$_prompt"; then
			(( CRON < 1 )) && printf 'Starting <%s>...' "$_sess"
			
			if sudo -n systemctl start avorion@"$_sess" >/dev/null 2>&1; then
				printf "${_grn}%s${_clr}\n" 'Success'
				return 0
			fi
		
			printf "${_red}%s${_clr}\n" 'Fail'
			return 1
		fi
	fi

	return 0
}

function __stop_avorion_instance () {
	local _time=0
	local _pid

	if ! systemctl status --no-pager avorion@"$1".service >/dev/null 2>&1; then
		return 0
	fi

	## Get the operating PID for that intance
	_pid="$(systemctl show --property MainPID --value avorion@"$1".service | tr -d '\n')"

	if [[ ! "$_pid" =~ ^[0-9][0-9]*$ ]]; then
		echo "Bad pid: <$_pid>"
		exit 1
	fi

	dbgsay "Using pid: $_pid"

	printf 'Stopping <%s> instance, this could take a while...' "$1"
	"$_tmuxcmd" -f "${_tmuxconf}" -S "${AVORION_SERVICEDIR}/sockets/${1}.sock" \
		send-keys ENTER "/say Stopping Avorion..." ENTER "/save" ENTER "/stop" ENTER \;

	## Continue looping while the /proc/$_pid/cmdline points to the correct executable
	while [[ -d "/proc/$_pid" ]] && grep -q "$AVORION_SERVICEDIR/$AVORION_BINDIR/bin/AvorionServer --galaxy-name ${1} " "/proc/$_pid/cmdline" >/dev/null 2>&1; do
		if ((_time < 1000 )); then
			printf '.'
			sleep 1
		else
			printf '\nInstance <%s> seems to be hanging, forcefully shutting down. This make take a moment.' "$1"
			if ! sudo -n systemctl stop avorion@"$1" >/dev/null 2>&1; then
				printf '%s\n' "Unable to stop <$1>. Killing."
				sudo -n systemctl kill avorion@"$1" >/dev/null 2>&1
				return 1
			fi
		fi
		((_time++))
	done

	sudo -n systemctl stop avorion@"$1" >/dev/null 2>&1
	printf "Done.\n"

	return 0
}

function __restart_avorion_instance () {
	__stop_avorion_instance "$1"
	FORCE=1 ##Skip confirmation dialogue
	__start_avorion_instance "$1" &&\
		return 0 ||\
		return 1
}

function __check_incompatible_modlist () {
	declare -A __mod_data __modded_insts
	local __avorion_version_string __instdir __modlist __pass __inst_comma __warn
	local __curmaxverstring __newmaxverstring __curminverstring __newminverstring
	local __minstring __maxstring __verbose_version_checks __fail_count
	local __verbose_version_checks

	__warn=''
	__avorion_version_string="$1"
	__verbose_version_checks=0

	# Get the list of directories that contain a modded
	# installation.
	while read -r __instdir; do
		dbgsay "Working on <$__instdir>"
		# do not permit execution to continue on directories
		# that contain special characters. 
		if [[ "$__instdir" =~ [^a-zA-Z0-9\/] ]]; then
			dbgsay "Found bad dir: <$__instdir>"
			continue
		fi

		## No point in attempting to operate on instances
		## without any mods downloaded.
		if [[ ! -d "${__instdir}/workshop/content/445220/" ]]; then
			dbgsay "No workshop content directory found <${__instdir}/workshop/content/445220/>"
			continue
		fi

		# Save only the instance name in the final array
		__modded_insts["$( basename "$__instdir" )"]=PASS
	done <<< "$( find "$AVORION_SERVICEDIR" -maxdepth 2 -type f -name modconfig.lua -printf '%h\n' 2>/dev/null )"

	for _inst in "${!__modded_insts[@]}"; do
		echo "Found: <$_inst>"
	done

	if (( ${#__modded_insts[@]} < 1 )); then
		echo 'No modded instances found.'
		return 0
	fi

	printf "Gathering data for version checking..."

	## Gather mod information from all of the instances currently present.
	for __inst in "${!__modded_insts[@]}"; do
		## Parse out all of the workshop IDs for the operative instance
		__modlist="$( sed -nr '
			/^\s*\{\s*workshopid/ { 
				s@^\s*\{\s*workshopid\s*=\s*("[0-9]+")\s*},.*@\1@
				s,",,gp
			}' "$AVORION_SERVICEDIR"/"$__inst"/modconfig.lua
		)"

		while read -r __modid; do
			if [[ ! -f "${AVORION_SERVICEDIR}/${__inst}/workshop/content/445220/${__modid}/modinfo.lua" ]]; then
				continue
			fi

			__newmaxverstring=''; __curmaxverstring=''
			__newminverstring=''; __curminverstring=''
			__inst_comma=','

			if [[ ! "$__modid" =~ ^[0-9][0-9]*$ ]]; then
				 say "	Incorrect MODID found in __check_incompatible_mods: <$__modid>"
				 continue
			fi

			## Populate the array with the fields that we will be operating on.
			## Fields are denoted by a ':'. Fields are as follows:
			##		1. Max Version (The highest max version found in any instance dir)
			##		2. Min Version (The highest min version found in any instance dir)
			##		3. Instance List (list of instances that have this mod
			if [[ -z "${__mod_data["$__modid"]}" ]]; then
				__mod_data["$__modid"]='::'
			fi

			[[ "${__mod_data["$__modid"]//:/_}" =~ ^([^:]*):([^:]*):([^:]*)$ ]]
			
			__curmaxverstring="${BASH_REMATCH[1]}"
			__curminverstring="${BASH_REMATCH[2]}"
			__curinstlist="${BASH_REMATCH[3]}"

			## Get the max version for the operative mod.
			## TODO: Refine this into either a proper sed or awk parser.
			__newmaxverstring="$(
				grep max "${AVORION_SERVICEDIR}/${__inst}/workshop/content/445220/${__modid}/modinfo.lua" |\
				grep -v '^[[:space:]]*\-\-' |\
				grep 'id[[:space:]]*=[[:space:]]*"Avorion"' |\
				grep -o 'max[[:space:]]*=[[:space:]]"[^\"]*"' |\
				sed 's,[^0-9\.\*],,g;s,\n,,g'
			)"
			
			## Get the min version for the operative mod
			## TODO: Refine this into either a proper sed or awk parser.
			__newminverstring="$(
				grep min "${AVORION_SERVICEDIR}/${__inst}/workshop/content/445220/${__modid}/modinfo.lua" |\
				grep -v '^[[:space:]]*\-\-' |\
				grep 'id[[:space:]]*=[[:space:]]*"Avorion"' |\
				grep -o 'min[[:space:]]*=[[:space:]]"[^\"]*"' |\
				sed 's,[^0-9\.\*],,g;s,\n,,g'
			)"

			if [[ -z "$__curmaxverstring" ]] || __compare_version_string "$__newmaxverstring" "$__curmaxverstring"; then
				__curmaxverstring="$__newmaxverstring"
			fi

			if [[ -z "$__curminverstring" ]] || __compare_version_string "$__newminverstring" "$__curminverstring"; then
				__curminverstring="$__newminverstring"
			fi

			if [[ -z "$__curinstlist" ]]; then
				__inst_comma=''
			fi

			__mod_data["$__modid"]="${__curmaxverstring}:${__curminverstring}:${__curinstlist}${__inst_comma}${__inst}"
		done <<< "$__modlist"
	done
	
	echo "Ready"

	if yesno "Would you like verbose output?"; then
		__verbose_version_checks=1
		__warn='--warn'
	fi

	__fail_count=0
	
	for __modid in "${!__mod_data[@]}"; do
		__pass=1

		printf '' >"$TMP_FILE"

		printf 'Checking Workshop Mod <%s>: ' "$__modid"

		if [[ ! "${__mod_data["$__modid"]}" =~ ^([^:]*):([^:]*):([^:]*)$ ]]; then
			(( __fail_count++ ))
			printf "${_red}ERROR (SKIPPING)${_clr}\n\tBad mod data string: <%s>" "${__mod_data["$__modid"]}"
			continue
		fi

		__maxstring="${BASH_REMATCH[1]}"
		__minstring="${BASH_REMATCH[2]}"
		__inst_list="${BASH_REMATCH[3]}"

		if [[ -n "$__maxstring" ]]; then
			if ! __compare_version_string "$__maxstring" "$__avorion_version_string" $__warn >>"$TMP_FILE"; then
				echo "Mod max version <$__maxstring> is lower than <$__avorion_version_string>" >> "$TMP_FILE"
				__pass=0
			fi
		fi

		if [[ -n "$__minstring" ]]; then
			if ! __compare_version_string "$__avorion_version_string" "$__minstring" $__warn >>"$TMP_FILE"; then
				echo "Mod min version <$__minstring> is higher than <$__avorion_version_string>" >> "$TMP_FILE"
				__pass=0
			fi
		fi

		if (( __pass < 1 )); then
			printf "${_red}%s${_clr}\n" "FAIL" 
			(( __fail_count++ ))
			for __inst in ${__inst_list//,/ }; do
				__modded_insts[$__inst]=FAIL
				printf '\t%s\n' "${AVORION_SERVICEDIR}/${_inst}/workshop/content/445220/${__modid}"
			done
		else
			printf "${_grn}%s${_clr}\n" 'PASS'
		fi

		## If our temp file isn't 0 bytes, output it
		(( $(wc -c "$TMP_FILE" | cut -d' ' -f 1) > 0 )) &&  sed 's,.*,\t&,' "$TMP_FILE"
	done

	printf '\nComplete, %s/%s passed version checks. Final instance status:\n' \
		"$(( ${#__mod_data[@]} - __fail_count ))" "${#__mod_data[@]}"

	if (( __fail_count > 0 )); then
		for __inst in "${!__modded_insts[@]}"; do
			printf '\t%s: %s\n' "$__inst" "${__modded_insts["$__inst"]}"
		done
	fi

	return "$__fail_count"
}

# void __perform_update <void>
#	Perform a server update for the Avorion server
#	software. Stops all current server instances,
#	updates the server, and restarts the stopped
#	instances if any were present. Can also be used
#	to install avorion if the server was not already
#	present on the system.
function __perform_update () {
	local _units _inst _steamcmd _updatedir _failed _newversion _instdir _modname __ret

	_updatedir="${AVORION_SERVICEDIR}/${AVORION_BINDIR}.updatefiles"
	_currentdir="${AVORION_SERVICEDIR}/${AVORION_BINDIR}"
	_failed=0

	## Overwrite default environment to fix sudo+steamcmd stupidity
	USER="$AVORION_USER"
	GROUP="$AVORION_ADMIN_GRP"
	HOME="$AVORION_SERVICEDIR"

	## Prevent instance control functions from doing validation
	## since we will be operating on instances that have already
	## gone through those in the first place.
	FORCE=1
	
	# Quick check to make sure that SteamCMD is present either
	# in steamcmd or steamcmd.sh form
	if [[ -f "$STEAMCMD_BIN" ]] || command -v "$STEAMCMD_BIN" 2>/dev/null; then
		_steamcmd="$STEAMCMD_BIN"
	else 
		_steamcmd="$(command -v steamcmd 2>/dev/null | head -n1 2>/dev/null)"
		if [[ -z "$_steamcmd" ]]; then
			die "SteamCMD definition is undefined, or invalid"
		fi
	fi

	if [[ ! -d /tmp/avorion ]]; then
		sudo -n -u avorion -g dsnineadm mkdir /tmp/avorion ||\
			die "Unable to create tmp directory"
	fi

	# Die if there is already an update running.
	if [[ -f "/tmp/avorion/updatingavorion.lock" ]]; then
		die "Update process already running, or a stale lock is present (/tmp/avorion/updatingavorion.lock)."
	fi

	sudo -n -u "$AVORION_USER" -g "$AVORION_ADMIN_GRP" touch /tmp/avorion/updatingavorion.lock >/dev/null 2>&1 ||\
		die "Unable to create avorion lockfile! Check /tmp usage." &&\
		echo "Updates locked."

	# Make sure that the update lock is removed following this
	# scripts end
	trap 'sudo -n -u "$AVORION_USER" -g "$AVORION_ADMIN_GRP" rm -rf /tmp/avorion/updatingavorion.lock;echo "Updates unlocked"; exit 0' EXIT INT TERM

	# Queries the systemd bus for active avorion@ instances and saves them
	_units="$(systemctl list-units 'avorion@*' | grep '^[[:space:]]*avorion@[^[:space:]][^[:space:]]*.service[[:space:]][[:space:]]*loaded[[:space:]][[:space:]]*active[[:space:]][[:space:]]*running' | awk '{print $1}')"
	
	dbgsay "Active instances: $_units"
	# If there were any active instances, stop them.
	if [[ -n "${_units}" ]]; then
		while read -r _inst; do
			_inst="${_inst%%.service}"
			_inst="${_inst##avorion@}"
			echo "Pausing <$_inst>"
			__stop_avorion_instance "${__inst}"
		done <<< "${_units}"
	fi

	# Download the latest version to: "${AVORION_SERVICEDIR}/${AVORION_BINDIR}.updatefiles"
	# ex: /srv/avorion/server_dir.updatefiles
	#
	# NOTE: Depending on the distrobution, steamcmd may require manual intervention in order to
	#       run this properly. This is a known issue with Debian based deb installations specifically.
	#       To work around this, install steamcmd manually to /opt/steam per the settings file included.
	#
	# NOTE2: Note also that - as this command uses sudo - the /etc/sudoers.d/avorion-ds9 file MUST be
	#        be up to date and reflectant of the settings in /etc/avorionsettings.conf in order for
	#        this to work correctly.
	
	cd "$AVORION_SERVICEDIR" || die "Failed to cd into service directory <$AVORION_SERVICEDIR>"
	if ! sudo -u "$AVORION_USER" -g "$AVORION_ADMIN_GRP" -n "$_steamcmd" +login anonymous +force_install_dir "$_updatedir" +app_update "$AVORION_STEAMID" validate +exit; then
		_failed=1
	fi

	if (( _failed > 0 )) || [[ ! -f "$_updatedir"/bin/AvorionServer ]]; then
		if [[ -d "$_updatedir" ]]; then
			rm -rf "$_updatedir" >/dev/null; 2>&1
		fi
		die "Failed to download new update"
	fi

	# Acquire the Avorion version of the new update
	__newversion="$( "$_updatedir"/bin/AvorionServer --version | tr -dc '[0-9.\*]')"

	echo
	if yesno "Would you like to check for incompatible mods?"; then
		if ! __check_incompatible_modlist "$__newversion"; then
			if ! yesno "Incompatible mods found, would you still like to proceed?"; then
				say "Removing update files and aborting..."
				rm -rf "$_updatedir" >/dev/null
				die "Done."
			fi
		fi
	fi

	echo
	# If there is prior server data, move that to a backup, just in case.
	if [[ -d "$_currentdir" ]]; then
		mv "$_currentdir" "${_currentdir}.updatebak-${EDATE}" ||\
			die "Unable to migrate old server installation!"
	fi

	# Attempt to move the updated data to its final destination. Upon failure,
	# attempt to revert, and exit
	if ! mv "$_updatedir" "$_currentdir"; then
		say "Unable to move update data to ${_currentdir}!"
		if [[ -d "${_currentdir}.updatebak-${EDATE}" ]]; then
			mv "${_currentdir}.updatebak-${EDATE}" "${_currentdir}" ||\
				say "Failed to revert changes to ${_currentdir}!"	
		fi
		
		die "Aborting."
	fi

	# If any instances were up prior to the update, re-start them
	if [[ -n "${_units}" ]]; then
		while read -r _inst; do
			_inst="${_inst%%.service}"
			_inst="${_inst##avorion@}"
			printf "Restarting <$_inst>..."
			if ! __start_avorion_instance "${_inst}"; then
				(( _failed++ ))
				printf "${_red}FAILED${_clr}\n"
				continue
			fi

			printf "${_grn}SUCCESS${_clr}\n"
		done <<< "${_units}"
	fi

	if (( _failed > 0 )); then
		echo "$_failed instance$(plural "$_failed") failed to start!"
		exit 1
	fi

	exit 0
}

# bool __perform_sector_reset <options> <int/string, ...>
#	Delete the sectors passed. The sectors can either be defined
#	individually or as part of a range using:
#	
#	int:int-int:int
#	
#	With the first set being the range of x values, and the second
#	being the range of y values.
#	Valid options include:
#		--backup	Force take backups
function __perform_sector_reset () {
	local _save _sector _bakdir _secdir
	local _x1 _x2 _y1 _y2
	local -a _sector_array
	_save=0
	_secdir="${AVORION_SERVICEDIR}/${_tmuxsess}/sectors/${EDATE}"

	# If the first argument is `--backups` then we don't need to confirm backups, we assume yes.
	# We also use that opportunity to shift the positional arguments to the left. Since `shift`
	# will return true, and only runs if the correct argument is found, this is still valid.
	if { [[ "$1" -eq '--backup' ]] && shift; } || yesno "Would you like to save backups?"; then
		_save=1
		_bakdir="${AVORION_SERVICEDIR}/${_tmuxsess}/sector_backup"
		if [[ ! -d "${_bakdir}" ]]; then
			mkdir -p "${_bakdir}" ||\
				die "Unable to create backup directory! Aborting."
		fi
	fi

	# While there are still arguments to process
	while (( $# > 0 )); do

		# Only follow this path if the given argument is a single
		# coord. Shift and continue execution in the next loop 
		# after the sector is queued
		if [[ "$1" =~ ^-{0,1}[0-9]{1,3}:-{0,1}[0-9]{1,3}$ ]]; then
			_sector="${1//:/_}"
			if ! [[ -f "${_secdir}/${_sector}" ]]; then
				dbgsay "Sector <${_sector}> doesn't exist. Skipping."
			else
				dbgsay "Queueing sector: <${_sector}>"
				_sector_array+=( "${_secdir}/${_sector}" )
			fi
			shift; continue

		# Only follow this path if the argument given is the defined range
		# of coordinates. Unlike before where we simply replace the `:` with
		# a `_`, here we make use of Bash's ability to store regex capture
		# an array (BASH_REMATCH) to generate two for loops to queue the
		# passed sectors.
		elif [[ "$1" =~ ^(-{0,1}[0-9]{1,3}):(-{0,1}[0-9]{1,3})-(-{0,1}[0-9]{1,3}):(-{0,1}[0-9]{1,3})$ ]]; then
			_x1="${BASH_REMATCH[1]}"; _x2="${BASH_REMATCH[2]}"
			_y1="${BASH_REMATCH[3]}"; _y2="${BASH_REMATCH[4]}"
			for _x in $(seq "$_x1" "$_x2"); do
				for _y in $(seq "$_y1" "$_y2"); do
					if ! [[ -f "${_secdir}/${_x}_${_y}" ]]; then
						dbgsay "Sector <${_x}_${_y}> doesn't exist. Skipping."
						continue
					fi

					dbgsay "Queuing sector: <${_x}_${_y}>"
					_sector_array+=( "${_secdir}/${_sector}" )
				done
			done

		# Die if the "sector" given is just invalid.
		else
			die "Bad sector formatting: <${1}>. Aborting."
		fi
	done

	# Obviously we dont need to continue if there are no
	# sectors to process
	if (( ${#_sector_array[@]} < 1 )); then
		say "No sectors to be processed."
		exit 0
	fi
	
	# Confirmation of sector deletion. the `plural` function
	# does exactly what it looks like it does. If the number
	# is NOT one, return an `s`
	if ! yesno "WARNING: Delete ${#_sector_array[@]} sector$(plural ${#_sector_array[@]})?"; then
		say "Aborted due to user input"
		exit 0
	fi

	# For every sector queued, backup if specified, and then
	# delete.
	for _sector in "${_sector_array[@]}"; do
		(( _save == 1 )) &&\
			cp "$_sector" "${_bakdir}/"
		rm "${_sector}"
	done
}

# bool __perform_config_edits <string, string>
#	Given a file and an instance, create a temporary
#	file in which to operate on and install it in the
#	correct instance directory. Note that this stops
#	the instance before installing the edits, as Avorion
#	will overwrite the edits made on restart.
#	
#	TODO: This is *very* WIP, use at your own risk
function __perform_config_edits () {
	__assert_valid_user_input "$2" \
		|| die "Invalid file passed: <$2>" \
	
	local __instance="$1"
	local __file="$2"
	local __inst_file="${AVORION_SERVICEDIR}/${__instance}/${__file}"
	local __temp_file="/tmp/avorion/${__instance}/${__file}.tmp"
	local __editor

	if ! [[ -w "${__inst_file}" ]]; then
		say "Unable to edit file: <${__inst_file}>"

		[[ -f "${__inst_file}" ]] \
			|| die "File does not exist."
	
		die "File is not writable. Are the permissions correct?"	
	fi

	if [[ -d "/tmp/avorion/${__instance}" ]]; then 
		[[ -f "${__temp_file}" ]] \
			&& die "Config file is already open by another"
	else
		mkdir -p "/tmp/avorion-cmd/${1}" >/dev/null 2>&1 \
			|| die "Unable to generate tmp directory /tmp/avorion-cmd/${1}"
	fi

	cp "${__inst_file}" "${__temp_file}" >/dev/null \
		|| die "Unable to generate temp file for editting"

	if [[ -z "${VISUAL}" ]]; then
		if [[ -z "${EDITOR}" ]]; then
			command -v nano >/dev/null 2>&1 ||\
				__editor="vi" &&\
				__editor="nano"
		else
			__editor="${EDITOR}"
		fi
	else
		__editor="${VISUAL}"
	fi

	# Ignore shellcheck here, we **want** this to expand
	trap "rm ${__temp_file} >/dev/null 2>&1 && echo 'Removed tempfile' || echo 'Unable to remove tempfile'" EXIT SIGTERM

	"${__editor}" "${__temp_file}" \
		|| die "Unable to write to <${__temp_file}>"
	
	echo "Stopping avorion@${__instance}.service..."
	__stop_avorion_instance "$__instance" >/dev/null

	mv "$__temp_file" "$__inst_file" \
		|| say "Unable to make changes to instance settings"

	echo "Starting avorion@${__instance}.service..."
	__start_avorion_instance "$__instance" \
		|| die "Unable to start!"
}

# void __show_service_instances <void>
#	Locate and verify current online and offline
#	instances. Then, print them (formatted) to the screen
#	and exit
function __show_service_instances () {
	if ! (( "$(find "${AVORION_SERVICEDIR}/sockets" -name '*.sock' -printf '.' | wc -c)" > 0 )); then
		echo "No service instances running"
		exit 1
	fi

	echo "${_bld}${_wht}Avorion Instances${_clr}"

	find "${AVORION_SERVICEDIR}/sockets" -name '*.sock' -printf '%f\n' | sort | while read -r _sock; do
		local _instance="${_sock%%.sock*}"
	
		if systemctl list-units 'avorion@*' 2>&1 | grep -q "^avorion@${_instance}.service " >/dev/null 2>&1 ; then
			systemctl status --no-pager avorion@"${_instance}" >/dev/null 2>&1 \
				&& echo "${_instance} (avorion@${_instance}) -- ${_grn}Online${_clr}" \
				|| echo "${_instance} (avorion@${_instance}) -- ${_red}Offline${_clr}"
		else
			if [[ -f "/etc/systemd/system/${_instance}.service" ]]; then
				systemctl status --no-pager "${_instance}" >/dev/null 2>&1 \
					&& echo "${_instance} -- ${_grn}Online${_clr}" \
					|| echo "${_instance} -- ${_red}Offline${_clr}"
			fi
		fi
	done
}

# bool __check_screen_tmux (void)
#	Return true if we are in a screen/tmux session, otherwise
#	return false.
function __check_screen_tmux () {
	# Skip this if --no-screen-enforce is passed
	(( NOSCREENCHECK > 0 )) && return 1

	# Die if we are running in a screen or tmux session.
	if [[ -n "$TMUX" ]] || [[ "$TERM" =~ ^(screen|tmux) ]] || [[ -n "$TMUX_PANE" ]] || [[ -n "$STY" ]]; then
		return 0
	fi

	return 1
}

function main () {
	# Die if there are no arguments passed
	(( $# < 1 )) &&\
		die "Usage: $CMDNAME <options> <parameters>"
	
	# Check for the existence of the given strings in the positional
	# parameter list. If they exist, remove it from said parameter
	# list and continue execution after setting the requisite vars.
	for _arg; do
		shift

		case "$_arg" in
			--debug) VERBOSE=1; continue ;;
			--allow-screen) NOSCREENCHECK=1; continue;;
		esac

		set -- "$@" "${_arg}"
	done

	__validate_setting_conf && source /etc/avorionsettings.conf
	__assert_valid_execution
	__set_globals

	local __err_bad_inst='Invalid instance passed:'

	case "$1" in
		start )
			__check_screen_tmux &&\
				die "$CMDNAME $1 should not be run in a screen or tmux session"

			__set_tmux_instance --skip-active-check "$2" ||\
				die "${__err_bad_inst} <$2>"

			__start_avorion_instance "$_tmuxsess" ||\
				exit 1 &&\
				exit 0
			;;

		stop )
			__check_screen_tmux &&\
				die "$CMDNAME $1 should not be run in a screen or tmux session"

			__set_tmux_instance "$2" ||\
				die "${__err_bad_inst} <$2>"

			__stop_avorion_instance "$_tmuxsess" ||\
				exit 1 &&\
				exit 0
			;;

		restart )
			__check_screen_tmux &&\
				die "$CMDNAME $1 should not be run in a screen or tmux session"

			__set_tmux_instance "$2" ||\
				die "${__err_bad_inst} <$2>"

			__restart_avorion_instance "$_tmuxsess" ||\
				exit 1 &&\
				exit 0
			;;
		
		lock )
			__set_tmux_instance "$2" ||\
				die "${__err_bad_inst} <$2>"
			exit 0
			;;

		view | attach )
			__check_screen_tmux &&\
				die "$CMDNAME $1 should not be run in a screen or tmux session"

			__set_tmux_instance "$2" \
				|| die "${__err_bad_inst} <$2>"

			"$_tmuxcmd" -f "${_tmuxconf}" -S "$_tmuxsock" attach -r ||\
				exit 1 &&\
				exit 0
			;;
		
		exec )
			__check_screen_tmux &&\
				die "$CMDNAME $1 should not be run in a screen or tmux session"

			__set_tmux_instance "$2" \
				|| die "${__err_bad_inst} <$2>"

			shift; shift
			"$_tmuxcmd" -f "${_tmuxconf}" -S "$_tmuxsock" send-keys ENTER "$@" ENTER \; attach -r ||\
				exit 1 &&\
				exit 0
			;;
		
		update )
			__perform_update ||\
				exit 1 &&\
				exit 0
			;;
		
		showinstances | -I )
			__show_service_instances ||\
				exit 1 &&\
				exit 0
			;;

		backup )
			__get_instance_dir ||\
				die "${__err_bad_inst} <$2>"

			__perform_backup "$_instdir" ||\
				exit 1 &&\
				exit 0
			;;

		config )
			__set_tmux_instance "$2" ||\
				die "${__err_bad_inst} <$2>"

			[[ "$_tmuxsess" =~ ^[sS][tT][eE][aA][mM] ]] ||\
				die "Steam configs are not managed by ${CMDNAME}"

			__perform_config_edits "$_tmuxsess" "$3" ||\
				exit 1 &&\
				exit 0
			;;

		resetsector )
			__set_tmux_instance "$2" ||\
				die "${__err_bad_inst} <$2>"

			shift; shift
			
			for _secarg; do
				# Regex to match the following cases: x:y, or x1:y1-x2:y2
				# while supporting negatives.
				[[ "$_secarg" =~ ${_regex_sector_arg} ]] ||\
					die "Invalid Sector Parameter: <${_secarg}>"
			done

			__perform_sector_reset "$@" ||\
				exit 1 &&\
				exit 0
			;;

		usage | --usage | -u )
			say "Avorion Manager v${CMDVERS}"
			say "Usage: ${CMDNAME} <command> <optons> <parameters>"
			exit 0
			;;

		--help | help | -h )
			cat << _EOF_
Avorion Commander v${CMDVERS}
Usage: ${CMDNAME} <command> <optons> <parameters>

Commands:
	showinstances --instances -I
		Display a listing of all Avorion/Steam instances

	help --help -h
		This help text
	
	usage --usage -u
		Print the usage text
	
	version --version -V
		Print versioning information
	
	start
		Start the given Avorion instance
		${_grn}${CMDNAME} start <instance>${_clr}
	
	restart
		Restart the given instance
		${_grn}${CMDNAME} restart <instance>${_clr}
	
	stop
		Stop the given instance. Unlike when used in game, this will prevent
		the game from restarting following the 30 second window. Use this when
		configuration changes need to be made. Alternatively, use ${_grn}config${_clr}
		instead.
		${_grn}${CMDNAME} stop <instance>${_clr}
	
	exec
		Pass the given commands into the instance server session.
		${_grn}${CMDNAME} exec <instance> <commands>${_clr}
		${_red}WARNING:${_clr} Unfinished/Untested and may be buggy, please dont use this for large Lua scripts commands until further tested.
	
	config
		Edit the specified configuration file for the Avorion instance given.
		${_grn}${CMDNAME} config <instance> <file>${_clr}
		${_red}WARNING:${_clr} Use this at your own risk. This feature is still under development and may be scrapped
		
		Avorion Config Files:
			server.ini
			modconfig.lua
			whitelist.txt
			blacklist.txt
			admin.xml
			ipblacklist.txt
			group-whitelist.txt
	
	resetsectors
		Reset the given sectors or range of sectors.
		${_grn}${CMDNAME} resetsectors <instance> <x:y, ...>${_clr}
		${_grn}${CMDNAME} resetsectors <instance> <x:x-y:y>${_clr}
		${_yel}This function is a work-in-progress!${_clr}

	backup
		Take a backup of the given instance.
		${_grn}${CMDNAME} backup <instance>${_clr}
		${_yel}NOTICE: Not currently implemented${_clr}
	
	update
		Force a game update. Not usually necessary as simply restarting the server
		should accomplish this.
_EOF_
			exit 0
			;;

		-V | --version )
			echo "${CMDVERS}"
			exit 0
			;;

		* )
			printf '%s\n' "Invalid argument passed: <$1>"
			exit 1
			;;
	esac
}

#@@@@@@@@@@@#
# Utilities #
#@@@@@@@@@@@#

# int __compare_version_string (str $1, str $2)
#	Determine whether or not the version string $1 is either a later
#	or matching revision to string $2. Returns true if so, and false if
#	otherwise.
#
#	Options:
#		--warn	Displays various warnings regarding why
#		a string may have failed, or if there is amgiguity regarding
#		its version matching (eg: Wildcards)
function __compare_version_string () {
	local __do_warn=0

	for __arg; do
		shift
		if [[ "$__arg" == "--warn" ]]; then
			__do_warn=1
			continue
		fi
		set -- "$@" "$__arg"
	done

	(( $# < 2 )) &&\
		die "Syntax error in __compare_version_string: Not enough arguments" 1>&2

	(( $# > 2 )) &&\
		die "Syntax error in __compare_version_string: Too many arguments" 1>&2
	
	local -a __checkstr_arr __basestr_arr
	local __check __base
	local __checkstr="$1"
	local __basestr="$2"
	local __pass=1
	local __warn=0
	local __diff=0
	
	dbgsay "Is $__checkstr >= $__basestr"

	## Prevent * from breaking everything by replacing those with
	## '?' characters. (* will expand into filenames, ? will not.)
	__checkstr="${__checkstr//\*/?}"
	__basestr="${__basestr//\*/?}"

	## Not the most ideal way of doing this, but it is reasonably safe
	## given our inputs. All these are doing is turning those strings
	## into arrays with the delimiter being the "."
	for n in ${__checkstr//./ }; do
		__checkstr_arr+=( "$n" )
	done
	for n in ${__basestr//./ }; do
		__basestr_arr+=( "$n" )
	done
	
	## Start looping on the array contents, using the "__basestr__arr"  
	## array as the base.
	for i in "${!__basestr_arr[@]}"; do
		__base="${__basestr_arr[$i]}"
		__check="${__checkstr_arr[$i]}"
		
		## If one of the versions is a wildcard, then we don't need to
		## continue past this point. Check is successful, but note the
		## warning that is set for when verbose output is enabled.
		if [[ "$__check" == '?' ]] || [[ "$__base" == '?' ]]; then
			__warn=1
			break

		## If one of the strings is exmpty, we've reached the end of this
		## version string and can stop. Check is considered successful.
		elif [[ -z "$__check" ]] || [[ -z "$__base" ]]; then
			__warn=2
			break
		fi
		
		## If the base version string ($2) is less than the version we are
		## checking ($1), break.
		if (( __base < __check )); then
			__diff="$(( __check - __base ))"
			break
		
		## Version substring matches, so continue
		elif (( __base == __check )); then
			continue
	
		## If the base version string ($2) is **higher** then the version
		## we are checking, then the check is considered a fail, and we stop.
		## 
		## At this point, we return 1 to indicate failure
		elif (( __base > __check )); then
			dbgsay "Cause: $__base > $__check"
			return 1
		fi
	done
	
	## When verbose error output is enabled, we want to output the following to
	## standard output. Note that the string refernces below are replacing '?' with '*'
	## Also note that the following only outputs on a successful run.
	if (( __do_warn > 0 )); then
		case "$__warn" in
			1) printf "${_yel}Wildcard version string is in use: <%s>${_clr}\n" "${__checkstr//\?/*}" ;;
			2) printf "${_yel}Version string missing latest point release: <%s>${_clr}\n" "${__checkstr//\?/*}" ;;
		esac
	
		if (( __diff > 5 )); then
			printf "${_yel}Passing point release is <%s> version$(plural "$__diff") higher than current update. Mod version: <%s>${_clr}\n" \
				"$__diff" \
				"${__checkstr//\?/*}"
		fi    
	fi

	return 0
}

# void say <string, ...>
#	Ouput the strings passed to stdout and return
function say () {
	for _l; do printf '%s\n' "${_l}"; done
	return 0
} 

# bool dbssay <string, ...>
#	If the script is currently in debug mode, `say`
#	the arguments passed to this function. Otherwise,
#	return code 1
function dbgsay () {
	if (( "${VERBOSE}" > 0 )); then
		say "$@"
	fi
}

# int die <options> <string>
#	Output the strings passed to stdout then exit
#	with status code 1 (or the code given with -c)
function die () {
	local _code=1
	if [[ "$1" == '-c' ]] && [[ "$2" =~ ^[0-9][0-9]*$ ]]; then
		_code="$2"
		shift; shift
	fi

	say "Error: $1"
	exit "$_code"
}

# bool yesno <string>
#	Get a yes or no response from the user and
#	return accordingly (0 for yes, 1 for no).
#	If a string is passed, provide the user with
#	that string as a prompt.
function yesno () {
	local _prompt _answer
	_prompt="${1-Yes/No}"

	while true; do
		printf "[${_prompt}]> "
		read -r _answer
		case "${_answer}" in
			[yY][eE][sS] | [yY] )
				return 0
				;;
			[nN][oO] | [nN] )
				return 1
				;;
			?)
				say "Please enter yes or no."
				;;
		esac
	done
}

# int plural <int>
#	Given an int, print an s to the caller if said
#	int does not equal 1
function plural () {
	if [[ "$1" =~ ^[0-9]+$ ]]; then
		if (( $1 != 1 )); then
			printf '%s' 's'
			return 0
		fi
		return 0
	fi

	die "Function <plural> recieved <$1> rather than an int"
}

main "$@"
