#!/usr/bin/env bash

## Make sure we are running in a Bash shell
if [ -z "$BASH_VERSION" ]; then
	echo 'Please run this script from a bash shell'
	exit 1
fi

source /usr/local/share/avorioncmd/common/common.sh

## Tmux Vars
declare  _tmuxsess _tmuxsock __allowed
readonly _tmuxconf=/etc/avorioncmd-tmux.conf
readonly _tmuxcmd="$(command -v tmux 2>/dev/null)"

## Regex Patterns
readonly _regex_sector_arg='^-{0,1}[0-9]{1,3}:-{0,1}[0-9]{1,3}(--{0,1}[0-9]{1,3}:-{0,1}[0-9]{1,3}|)$'
readonly _regex_sector_num='-{0,1}[0-9]{1,3}'
readonly VALIDCMDS='stop|start|restart|showinstances|view|attach|exec|update|resetsectors|usage|config|version|downloadupdate'
readonly VALIDSWCHS='-I|-h|-u|--help|-V|--version'

## Execution Flags
declare DOALL=0
declare DOKILL=0

# bool __set_tmux_instance <string>
#	Provided a string, verify that the instance
#	is a valid (and active) tmux controlled instance
#	and set the tmux socket and session globals
function __set_tmux_instance () {
	local __skip_active=0
	
	for _arg; do
		shift
			if [[ "$_arg" == '--skip-active-check' ]]; then
				__skip_active=1
				continue
			fi

			if [[ "$_arg" =~ ^${VALIDCMDS}|${VALIDSWCHS}$ ]]; then
				echo "$_arg is not a valid galaxy name."
				echo "Usage: $CMDNAME $_arg <galaxy_name>"
				exit 1 
			fi

		set -- "$@" "$_arg"
	done

	## Die if there are no more arguments left
	(( $# > 0 )) || return 1

	# Strip bad chars from user input
	_tmuxsess="$1"
	_tmuxsess="${_tmuxsess//[ _]/\-}"
	_tmuxsess="${_tmuxsess//[^a-zA-Z0-9\-]/}"

	if (( __skip_active > 0 )); then
		return 0
	fi

	# If the instance is either an Avorion instance or a valid service
	# file, then use that and set the tmux session
	if systemctl status --no-pager avorion@"$_tmuxsess" >/dev/null 2>&1; then
		_tmuxsock="${AVORION_SERVICEDIR}/sockets/${_tmuxsess}.sock"
		return 0
	else
		echo "$_tmuxsess is not a valid galaxy"
		exit 1
	fi
}

function __start_avorion_instance () {
	local _prompt
	local _noout=0
	local _noprompt=0

	for __arg; do
		shift
		case "$__arg" in
			--suppress-output) _noout=1; continue ;;
			--no-prompt) _noprompt=1; continue ;;
		esac
		set -- "$@" "$__arg"
	done


	if (( $(( FORCE + CRON )) > 0 )); then
		_noout=1
	fi

	## Strip avorion@ and .service for sanity
	local _sess="$1"
	_sess="${_sess%%.service}"
	_sess="${_sess##avorion@}"
	_prompt="Are you certain you wish to start ${__f_green}${_sess}${__t_clear}?"

	if ! systemctl status --no-pager avorion@"$_sess".service >/dev/null 2<&1; then
		if  (( _noout > 0 )) || (( _noprompt > 0 )) || yesno "$_prompt"; then
			(( _noout < 1 )) && printf 'Starting <%s>...' "$_sess"
			
			if sudo -n systemctl start avorion@"$_sess" >/dev/null 2>&1; then
				(( _noout < 1 )) && printf "${__f_green}%s${__t_clear}\n" 'Success'
				return 0
			fi
		
			if (( _noout < 1 )); then
				printf "${__f_red}%s${__t_clear}\n" 'Fail'
				printf "\t\tEither the service is broken, or the galaxy you are starting is not configured\n"
				printf "\t\tIf this is intentional, and you have permissions, use sudo."
			else
				printf 'Failed to start avorion@%s.service\n' "${_sess}"
			fi

			return 1
		else
			return 0
		fi
	fi

	(( _noout < 1 )) && printf 'Galaxy <%s> is already active.\n' "$_sess"

	return 0
}

function __kill_avorion_instance () {
	## Kill the galaxy, and prevent the galaxy from restarting
	sudo -n systemctl kill avorion@"$1" >/dev/null 2>&1
	sudo -n systemctl stop avorion@"$1" >/dev/null 2>&1

	if (( CRON < 1 )); then
		printf 'Killed Avorion galaxy: <%s>\n' "$1"
	fi

	## Remove the old tmux socket _if_ it still exists. It shouldn't, but
	## Ive run into situations where it _did_ for no real reason.
	rm "${AVORION_SERVICEDIR}/sockets/${1}.sock"
	return $?
}

function __stop_avorion_instance () {
	local _time=0
	local _pid

	dbgsay "Checking $1"
	if ! systemctl status --no-pager avorion@"$1".service >/dev/null 2>&1; then
		dbgsay "Galaxy instance avorion@${1}.service is not active"
		return 0
	fi

	## Get the operating PID for that intance
	_pid="$(systemctl show -p MainPID avorion@"$1".service | tr -d '\n' | sed 's,MainPID=,,')"

	if [[ ! "$_pid" =~ ^[0-9][0-9]*$ ]]; then
		echo "Bad pid: <$_pid>"
		exit 1
	fi

	## Easy hack to make killing Avorion quick without needing to rewrite
	## everything.
	if (( DOKILL > 0 )); then
		__kill_avorion_instance "$1"
		return
	fi

	dbgsay "Using pid: $_pid"
	(( CRON < 1 )) && printf 'Stopping <%s> galaxy, this could take a while...' "$1"
	"$_tmuxcmd" -f "${_tmuxconf}" -S "${AVORION_SERVICEDIR}/sockets/${1}.sock" \
		send-keys ENTER "/say Stopping Avorion..." ENTER "/save" ENTER "/stop" ENTER \;

	## Continue looping while the /proc/$_pid/cmdline points to the correct executable
	while [[ -d "/proc/$_pid" ]] && grep -q "$AVORION_SERVICEDIR/$AVORION_BINDIR/bin/AvorionServer --galaxy-name ${1} " "/proc/$_pid/cmdline" >/dev/null 2>&1; do
		(( _time++ ))
		if (( _time < 1000 )); then
			(( CRON < 1 )) && printf '.'
			sleep 1s
		else
			printf '\nGalaxy instance <%s> seems to be hanging, forcefully shutting down. This may take a moment..' "$1"
			if ! sudo -n systemctl stop avorion@"$1" >/dev/null 2>&1; then
				printf '%s\n' "Unable to stop <$1>. Killing."
				__kill_avorion_instance "$1"
				return 1
			fi
		fi
	done

	if ! sudo -n systemctl stop avorion@"$1" >/dev/null; then
		printf "Cannot fully stop! (Do you have permission to?)\n"
		printf '"\save + \stop" has been sent, but the instance will reboot due to lack of permissions.\n'
	fi
	(( CRON < 1 )) && printf "Done.\n"

	return 0
}

function __sendcmd_avorion_instance () {
	[[ -z "$__inst" ]] &&\
		die "Please supply a valid galaxy: <$__inst>"

	for __param; do
		"$_tmuxcmd" \
			-f "${_tmuxconf}" \
			-S "$AVORION_SERVICEDIR/sockets/${__inst}.sock" \
			send-keys ENTER "$__param" ENTER
	done
				 
	## If +all is given we **really** dont want to attach
	if (( DOATTACH > 0 && DOALL < 1 )); then
		"$_tmuxcmd" \
			-f "${_tmuxconf}" \
			-S "$AVORION_SERVICEDIR/sockets/${__inst}.sock" \
			attach -r
	fi
}

function __restart_avorion_instance () {
	__stop_avorion_instance "$1"
	__start_avorion_instance "$1" --no-prompt &&\
		return 0 ||\
		return 1
}

function __check_incompatible_modlist () {
	declare -A __mod_data __modded_insts
	local __avorion_version_string __instdir __modlist __pass __inst_comma __warn
	local __curmaxverstring __newmaxverstring __curminverstring __newminverstring
	local __minstring __maxstring __fail_count __color __auto_run
	local __newinstlist __curinstlist 

	__warn=''
	__avorion_version_string="$1"
	__auto_run=0

	## Are we doing an auto-update?
	if [[ "$2" == '--auto' ]]; then
		__auto_run=1
	fi

	# Get the list of directories that contain a modded
	# installation.
	while read -r __instdir; do
		dbgsay "Working on <$__instdir>"
		# do not permit execution to continue on directories
		# that contain special characters. 
		if [[ "$__instdir" =~ [^a-zA-Z0-9\/] ]]; then
			dbgsay ">> Found bad dir: <$__instdir>"
			continue
		fi

		## No point in attempting to operate on galaxies
		## without any mods downloaded.
		if [[ ! -d "${__instdir}/workshop/content/445220/" ]]; then
			dbgsay ">> No workshop content directory found <${__instdir}/workshop/content/445220/>"
			continue
		fi

		# Save only the instance name in the final array
		__modded_insts["$( basename "$__instdir" )"]=PASS
	done <<< "$( find "$AVORION_SERVICEDIR" -maxdepth 2 -type f -name modconfig.lua -printf '%h\n' 2>/dev/null )"

	printf "${__f_white}Searching for modded galaxies...Found ${#__modded_insts[@]}\n"
	for _inst in "${!__modded_insts[@]}"; do
		printf "${__f_lgray}>> Found: <%s>${__t_clear}\n" "$_inst"
	done

	if (( ${#__modded_insts[@]} < 1 )); then
		printf "${__f_lgray}>> No modded galaxies found.${__t_clear}\n"
		return 0
	fi

	printf "\n${__f_white}Gathering data for version checking...${__t_clear}"

	dbgsay ""
	## Gather mod information from all of the galaxies currently present.
	for __inst in "${!__modded_insts[@]}"; do
		## Parse out all of the workshop IDs for the operative galaxy
		__modlist="$( sed -nr '
			/^\s*\{\s*workshopid/ { 
				s@^\s*\{\s*workshopid\s*=\s*("[0-9]+")\s*},.*@\1@
				s,",,gp
			}' "$AVORION_SERVICEDIR"/"$__inst"/modconfig.lua
		)"

		while read -r __modid; do
			if [[ ! -f "${AVORION_SERVICEDIR}/${__inst}/workshop/content/445220/${__modid}/modinfo.lua" ]]; then
				continue
			fi

			__newmaxverstring=''; __curmaxverstring=''
			__newminverstring=''; __curminverstring=''
			__newinstlist='';__curinstlist=''
			__inst_comma=','

			if [[ ! "$__modid" =~ ^[0-9][0-9]*$ ]]; then
				 dbgsay ">>	Incorrect MODID found in __check_incompatible_mods: <$__modid>"
				 continue
			fi

			## Populate the array with the fields that we will be operating on.
			## Fields are denoted by a ':'. Fields are as follows:
			##		1. Max Version (The highest max version found in any galaxy dir)
			##		2. Min Version (The highest min version found in any galaxy dir)
			##		3. Galaxy List (list of galaxies that have this mod
			if [[ ! "${__mod_data["$__modid"]}" =~ ^([^:]*):([^:]*):([^:]*)$ ]]; then
				dbgsay ">> Generating new data for ${__modid}"
				__mod_data["$__modid"]='::'
			fi
			
			__curmaxverstring="${BASH_REMATCH[1]}"
			__curminverstring="${BASH_REMATCH[2]}"
			__curinstlist="${BASH_REMATCH[3]}"

			[[ -z "$__curinstlist" ]] && __inst_comma=''
			
			## Get the max version for the operative mod.
			## TODO: Refine this into either a proper sed or awk parser.
			__newmaxverstring="$(
				grep max "${AVORION_SERVICEDIR}/${__inst}/workshop/content/445220/${__modid}/modinfo.lua" |\
				grep -v '^[[:space:]]*\-\-' |\
				grep 'id[[:space:]]*=[[:space:]]*"Avorion"' |\
				grep -o '[[:space:]]*max[[:space:]]*=[[:space:]]*"[^\"]*"' |\
				sed 's,[^0-9\.\*],,g;s,\n,,g'
			)"
			
			## Get the min version for the operative mod
			## TODO: Refine this into either a proper sed or awk parser.
			__newminverstring="$(
				grep min "${AVORION_SERVICEDIR}/${__inst}/workshop/content/445220/${__modid}/modinfo.lua" |\
				grep -v '^[[:space:]]*\-\-' |\
				grep 'id[[:space:]]*=[[:space:]]*"Avorion"' |\
				grep -o '[[:space:]]*min[[:space:]]*=[[:space:]]*"[^\"]*"' |\
				sed 's,[^0-9\.\*],,g;s,\n,,g'
			)"

			if [[ -z "$__curmaxverstring" ]] || __compare_version_string "$__newmaxverstring" "$__curmaxverstring"; then
				__curmaxverstring="$__newmaxverstring"
			fi

			if [[ -z "$__curminverstring" ]] || __compare_version_string "$__newminverstring" "$__curminverstring"; then
				__curminverstring="$__newminverstring"
			fi

			if ! grep -q "\(^${__inst}\|,${__inst},\|,${__inst}$\)" <<< "$__curinstlist" >/dev/null 2>&1; then
				__newinstlist="${__curinstlist}${__inst_comma}${__inst}"
			fi

			__mod_data["$__modid"]="${__curmaxverstring}:${__curminverstring}:${__newinstlist}"
			dbgsay ">> Data Collated for <$__modid>: ${__mod_data["$__modid"]//:/ }"
		done <<< "$__modlist"
	done
	
	printf "${__f_white}Ready\n"

	if (( __auto_run > 0 )) || yesno "Would you like verbose output?"; then
		__warn='--warn'
	fi

	__fail_count=0
	
	for __modid in "${!__mod_data[@]}"; do
		__pass=1

		printf '' >"$TMP_FILE"

		printf "${__f_lgray}>> Checking Workshop Mod <%s>:${__t_clear} " "$__modid"

		if [[ ! "${__mod_data["$__modid"]}" =~ ^([^:]*):([^:]*):([^:]*)$ ]]; then
			(( __fail_count++ ))
			printf "${__f_lgray}>> ${__t_clear}${__f_red}ERROR (SKIPPING)${__t_clear}\n\t${__f_red}Bad mod data string: <%s>${__t_clear}\n" "${__mod_data["$__modid"]}"
			continue
		fi

		__maxstring="${BASH_REMATCH[1]}"
		__minstring="${BASH_REMATCH[2]}"
		__inst_list="${BASH_REMATCH[3]}"

		if [[ -n "$__maxstring" ]]; then
			if ! __compare_version_string "$__maxstring" "$__avorion_version_string" $__warn >> "$TMP_FILE"; then
				echo "Mod max version <$__maxstring> is lower than <$__avorion_version_string>" >> "$TMP_FILE"
				__pass=0
			fi
		fi

		if [[ -n "$__minstring" ]]; then
			if ! __compare_version_string "$__avorion_version_string" "$__minstring" $__warn >> "$TMP_FILE"; then
				echo "Mod min version <$__minstring> is higher than <$__avorion_version_string>" >> "$TMP_FILE"
				__pass=0
			fi
		fi

		if (( __pass < 1 )); then
			printf "${__f_lred}%s${__t_clear}\n" "FAIL" 
			(( __fail_count++ ))
			for __inst in ${__inst_list//,/ }; do
				__modded_insts[$__inst]=FAIL
				printf "${__f_lgray}>> %s\n${__t_clear}" "${AVORION_SERVICEDIR}/${__inst}/workshop/content/445220/${__modid}"
			done
		else
			printf "${__f_lgreen}%s${__t_clear}\n" 'PASS'
		fi

		## If our temp file isn't 0 bytes, output it
		if (( $(wc -c "$TMP_FILE" | cut -d' ' -f 1) > 0 )); then
			sed "s,.*,${__esc}[0;37m>> ${__esc}[1;33m&${__esc}[0m," "$TMP_FILE"
			printf '\n'
		fi
	done

	printf "${__f_white}\nComplete, %s/%s passed version checks. Final galaxy instance status:${__t_clear}\n" \
		"$(( ${#__mod_data[@]} - __fail_count ))" "${#__mod_data[@]}"

	for __inst in "${!__modded_insts[@]}"; do
		[[ "${__modded_insts["$__inst"]}" == 'PASS' ]] &&\
			__color="$__f_lgreen" ||\
			__color="$__f_lred"
		printf "${__f_lgray}>> %s:${__t_clear} ${__color}%s${__t_clear}\n" \
			"$__inst" "${__modded_insts["$__inst"]}"
	done

	return "$__fail_count"
}

# void __perform_update <void>
#	Perform a server update for the Avorion server
#	software. Stops all current server instances,
#	updates the server, and restarts the stopped
#	instances if any were present. Can also be used
#	to install avorion if the server was not already
#	present on the system.
function __perform_update () {
	local -a _units
	local _inst _steamcmd _updatedir _failed __newversion
	local __oldversion __oldgrp __oldusr __oldhome __do_auto
	local __steamcmd_command_string __auto_update 

	_updatedir="${AVORION_SERVICEDIR}/${AVORION_BINDIR}.updatefiles"
	_currentdir="${AVORION_SERVICEDIR}/${AVORION_BINDIR}"
	_failed=0
	__auto_update=0

	## No point in continuing if the service directory doesnt exist/cant be accessed.
	cd "$AVORION_SERVICEDIR" >/dev/null 2>&1 || die "Failed to cd into service directory <$AVORION_SERVICEDIR>"

	# Quick check to make sure that SteamCMD is present either
	# in steamcmd or steamcmd.sh form
	if [[ -f "$STEAMCMD_BIN" ]] || command -v "$STEAMCMD_BIN" >/dev/null 2>&1; then
		_steamcmd="$STEAMCMD_BIN"
	else 
		_steamcmd="$(command -v steamcmd 2>/dev/null | head -n1 2>/dev/null)"
		if [[ -z "$_steamcmd" ]]; then
			die "SteamCMD definition is undefined, or invalid"
		fi
	fi

	if [[ ! -d /tmp/avorion ]]; then
		sudo -n -u "$AVORION_USER" -g "$AVORION_ADMIN_GRP" mkdir /tmp/avorion ||\
			die "Unable to create tmp directory"
	fi

	# Die if there is already an update running.
	if [[ -f "/tmp/avorion/updatingavorion.lock" ]]; then
		die "Update process already running, or a stale lock is present (/tmp/avorion/updatingavorion.lock)."
	fi

	if [[ ! -d "$_updatedir" ]]; then
		if [[ -e "$_updatedir" ]]; then
			rm "$_updatedir" || die "Cannot remove bad update directory! <$_updatedir>"
		fi

		if ! mkdir "$_updatedir"; then
			die "Cannot create update directory!"
		fi
	fi

	if [[ "$1" == "--auto" ]]; then
		__auto_update=1
	fi

	## Create a file called avorion.updatestatus that will house the current
	## state of the Avorion update run. 
	if (( __auto_update > 0 )); then
		sudo -u "$AVORION_USER" -g "$AVORION_ADMIN_GRP" sh -c "echo 'updating:auto:' > '$_updatedir/avorion.updatestatus'"
		__do_auto="--auto"
	fi

	sudo -u "$AVORION_USER" -g "$AVORION_ADMIN_GRP" -n touch /tmp/avorion/updatingavorion.lock ||\
		die "Unable to create avorion lockfile! Check /tmp usage." &&\
		printf "${__f_white}Updates locked.${__t_clear}\n"

	## Make sure that the update lock is removed following this
	## scripts end. The `trap - EXIT TERM INT` is used here to
	## prevent the exit inside the trap from tripping *another*
	## trap run.
	trap 'echo
		trap - EXIT TERM INT
		[[ -f $AVORION_SERVICEDIR/$AVORION_BINDIR/avorion.updatestatus ]] &&\
			rm "$AVORION_SERVICEDIR/$AVORION_BINDIR/avorion.updatestatus"
		sudo -n -u "$AVORION_USER" -g "$AVORION_ADMIN_GRP" rm /tmp/avorion/updatingavorion.lock &&\
			printf "${__f_white}Updates unlocked${__t_clear}\n" ||\
			printf "${__f_red}Failed to unlock updates${__t_clear}\n"
		exit $?' TERM EXIT INT

	# If there were any active galaxies, stop them **if** we are going to actually
	# finish the update. If not, leave them running.
	if (( __auto_update < 1 )); then
		# Queries the systemd bus for active avorion@ galaxies and saves them
		printf "${__f_white}Checking for active Avorion galaxies...${__t_clear}"
		_units=( $(systemctl list-units 'avorion@*' | grep "$__unit_string" | awk '{print $1}') )
		printf "${__f_white}Found %s\n${__t_clear}" "${#_units[@]}"

		if (( "${#_units[@]}" > 0 )); then
			for _inst in "${_units[@]}"; do
				_inst="${_inst%%.service}"
				_inst="${_inst##avorion@}"
				printf "${__f_lgray}>> Pausing <%s>${__t_clear}\n" "$_inst"
				__stop_avorion_instance "${_inst}" >/dev/null
			done
		fi
	fi

	## Overwrite default environment to fix sudo+steamcmd stupidity
	__oldgrp="$GROUP"
	__oldusr="$USER"
	__oldhome="$HOME"
	export USER="$AVORION_USER"
	export GROUP="$AVORION_ADMIN_GRP"
	export HOME="$AVORION_SERVICEDIR"

	# Download the latest version to: "${AVORION_SERVICEDIR}/${AVORION_BINDIR}.updatefiles"
	# ex: /srv/avorion/server_dir.updatefiles
	#
	# NOTE: Depending on the distribution, steamcmd may require manual intervention in order to
	#       run this properly. This is a known issue with Debian based deb installations specifically.
	#       To work around this, install steamcmd manually to /opt/steam per the settings file included.
	#
	# NOTE2: Note also that - as this command uses sudo - the /etc/sudoers.d/avorion-ds9 file MUST be
	#        be up to date and reflectant of the settings in /etc/avorionsettings.conf in order for
	#        this to work correctly.
	printf "\n${__f_white}Running SteamCMD binary <%s>.${__t_clear}\n" "$_steamcmd"

	__steamcmd_command_string="sudo -u $AVORION_USER -g $AVORION_ADMIN_GRP -n $_steamcmd +login anonymous +force_install_dir $_updatedir +app_update $AVORION_STEAMID validate +exit"
	printf "${__f_lgray}"
	if ! $__steamcmd_command_string; then
		_failed=1
	fi
	printf "${__t_clear}"

	## Revert stupid fix
	export USER="$__oldusr"
	export HOME="$__oldhome"
	export GROUP="$__oldgrp"

	## No point in continuing if the download failed
	if (( _failed > 0 )) || [[ ! -f "$_updatedir"/bin/AvorionServer ]]; then
		if [[ -d "$_updatedir" ]]; then
			rm -rf "$_updatedir" >/dev/null 2>&1
		fi
		die "Failed to download new update"
	fi

	# Acquire the Avorion version of the updated binary
	__newversion="$( "$_updatedir"/bin/AvorionServer --version | tr -dc '[0-9.\*]')"

	printf "${__f_white}\n"
	if (( __auto_update > 0 )) || yesno "Would you like to check for incompatible mods?"; then
		if ! __check_incompatible_modlist "$__newversion" $__do_auto; then
			printf "${__f_white}\n"
			if  (( __auto_update < 1 )) && ! yesno "Incompatible mods found, would you still like to proceed?"; then
				printf "Removing update files and aborting.\n"
				rm -rf "$_updatedir" >/dev/null
				exit 1
			fi

			## If this was an auto-update run, then create a touchfile that the system
			## will later use to determine whether or not updates are complete and
			## ready to go.
			if (( __auto_update > 0 )); then
				sudo -u "$AVORION_USER" -g "$AVORION_ADMIN_GRP" sh -c "echo 'complete:wontstart:brokenmods' > '$_updatedir/avorion.updatestatus'"
				die "Update downloaded, but detected broken mod versions."
			fi
		fi
	fi
	printf "${__t_clear}\n"

	if (( __auto_update < 1 )); then
		# If there is prior server data, move that to a backup, just in case.
		if [[ -d "$_currentdir" ]]; then
			__oldversion="$( "$_currentdir"/bin/AvorionServer --version | tr -dc '[0-9.\*]')"
			if [[ -d "${_currentdir}.updatebak-${__oldversion}" ]]; then
				rm -rf "${_currentdir}.updatebak-${__oldversion}" >/dev/null
			fi
			printf "${__f_white}Backing up old server version to <${_currentdir}.updatebak-${__oldversion}>${__t_clear}\n"
			mv --strip-trailing-slashes -T "$_currentdir" "${_currentdir}.updatebak-${__oldversion}" >/dev/null 2>&1
		fi

		# Attempt to move the updated data to its final destination. Upon failure,
		# attempt to revert, and exit
		if ! mv --strip-trailing-slashes -T "$_updatedir" "$_currentdir"; then
			printf "${__f_lred}>> Unable to move update data to ${_currentdir}!${$__t_clear}"
			if [[ -n "$__oldversion" ]] && [[ -d "${_currentdir}.updatebak-${__oldversion}" ]]; then
				rm -rf "$_updatedir"
				mv --strip-trailing-slashes -T "${_currentdir}.updatebak-${__oldversion}" "${_currentdir}" ||\
					printf "${__f_lred}>> Failed to revert changes to ${_currentdir}!${__t_clear}"
			fi
			
			die "Aborting."
		fi

		# If any instances were up prior to the update, re-start them
		if (( "${#_units[@]}" > 0 )); then
			printf "${__f_white}Attempting to restart services${__t_clear}\n"
			for _inst in "${_units[@]}"; do
				_inst="${_inst%%.service}"
				_inst="${_inst##avorion@}"
				printf "${__f_lgray}>> Restarting <%s>...${__t_clear}" "$_inst"
				if ! __start_avorion_instance --suppress-output "${_inst}"; then
					(( _failed++ ))
					printf "${__f_lred}FAILED${__t_clear}\n"
					continue
				fi

				printf "${__f_lgreen}SUCCESS${__t_clear}\n"
			done
		fi

		if (( _failed > 0 )); then
			printf "${__f_lred}\n$_failed galaxy instance$(plural "$_failed") failed to start!${__t_clear}\n"
			exit 1
		fi
	else
		if (( _failed < 1 )); then
			printf "${__f_white}\nAuto update complete, and ready for installation.\n"
			sudo -u "$AVORION_USER" -g "$AVORION_ADMIN_GRP" sh -c "echo 'complete:success:' > '$_updatedir/avorion.updatestatus'"
		else
			printf "\nAuto update failed! (Unknown reason)\n"
			if [[ -f "$_updatedir" ]]; then
				sudo -u "$AVORION_USER" -g "$AVORION_ADMIN_GRP" sh -c "echo 'complete:failed:unknown' > '$_updatedir/avorion.updatestatus'"
			fi
			printf "\n"
			exit 1
		fi
	fi

	exit 0
}

# bool __perform_sector_reset <options> <int/string, ...>
#	Delete the sectors passed. The sectors can either be defined
#	individually or as part of a range using:
#	
#	int:int-int:int
#	
#	With the first set being the range of x values, and the second
#	being the range of y values.
#	Valid options include:
#		--backup	Force take backups
function __perform_sector_reset () {
	local _save _sector _bakdir _secdir
	local _x1 _x2 _y1 _y2
	local -a _sector_array
	_save=0
	_secdir="${AVORION_SERVICEDIR}/${_tmuxsess}/sectors"

	for __arg; do
		shift
		case "$__arg" in
			--backup ) _save=1; continue;;
		esac
		set -- "$@" "$__arg"
	done

	if systemctl --no-pager status avorion@"$_tmuxsess" >/dev/null 2>&1; then
		echo "$_tmuxsess is active, aborting."
		exit 0
	fi

	# If the first argument is `--backups` then we don't need to confirm backups, we assume yes.
	# We also use that opportunity to shift the positional arguments to the left. Since `shift`
	# will return true, and only runs if the correct argument is found, this is still valid.
	if (( _save > 0 )) || yesno "Would you like to save backups?"; then
		_save=1
		_bakdir="${AVORION_SERVICEDIR}/${_tmuxsess}/sector_backup"
		if [[ ! -d "${_bakdir}" ]]; then
			mkdir -p "${_bakdir}" ||\
				die "Unable to create backup directory! Aborting."
		fi
	fi

	# While there are still arguments to process
	while (( $# > 0 )); do

		# Only follow this path if the given argument is a single
		# coord. Shift and continue execution in the next loop 
		# after the sector is queued
		if [[ "$1" =~ ^-{0,1}[0-9]{1,3}:-{0,1}[0-9]{1,3}$ ]]; then
			_sector="${1//:/_}"
			if ! [[ -f "${_secdir}/${_sector}" ]]; then
				dbgsay "Sector <${_sector}> doesn't exist. Skipping."
			else
				dbgsay "Queueing sector: <${_sector}>"
				_sector_array+=( "${_secdir}/${_sector}" )
			fi

			shift; continue

		# Only follow this path if the argument given is the defined range
		# of coordinates. Unlike before where we simply replace the `:` with
		# a `_`, here we make use of Bash's ability to store regex capture
		# an array (BASH_REMATCH) to generate two for loops to queue the
		# passed sectors.
		elif [[ "$1" =~ ^(-{0,1}[0-9]{1,3}):(-{0,1}[0-9]{1,3})-(-{0,1}[0-9]{1,3}):(-{0,1}[0-9]{1,3})$ ]]; then
			_x1="${BASH_REMATCH[1]}"; _x2="${BASH_REMATCH[2]}"
			_y1="${BASH_REMATCH[3]}"; _y2="${BASH_REMATCH[4]}"
			dbgsay "Processing -- <x1:${_x1} - x2:${_x2}> <y1:${_y1} - y2:${_y2}>"
			if (( _x2 < _x1 )) || ((  _y2 < _y1 )); then
				printf '%s\n' "Invalid input: <$1>" "x2/y2 must be greater than x1/y1"
				exit 1
			fi
			for _x in $(seq "$_x1" "$_x2"); do
				for _y in $(seq "$_y1" "$_y2"); do
					if ! [[ -f "${_secdir}/${_x}_${_y}" ]]; then
						dbgsay "Sector <${_x}_${_y}> doesn't exist. Skipping."
						continue
					fi

					dbgsay "Queuing sector: <${_x}_${_y}>"
					_sector_array+=( "${_secdir}/${_x}_${_y}" )
				done
			done
			shift; continue

		# Die if the "sector" given is just invalid.
		else
			die "Bad sector formatting: <${1}>. Aborting."
		fi
	done

	if (( ${#_sector_array[@]} < 1 )); then
		say "No sectors to be processed."
		exit 0
	fi
	
	if ! yesno "WARNING: Delete ${#_sector_array[@]} sector$(plural ${#_sector_array[@]})? Time taken *will* increase with sector count."; then
		say "Aborted due to user input"
		exit 0
	fi

	if [[ -f "${AVORION_SERVICEDIR}/${_tmuxsess}/sectorremoval-${EDATE}.log" ]]; then
		mv -f "${AVORION_SERVICEDIR}/${_tmuxsess}/sectorremoval-${EDATE}.log" \
			"${AVORION_SERVICEDIR}/${_tmuxsess}/sectorremoval-${EDATE}.log.bak"
	fi

	printf "Deleting sectors..."
	# For every sector queued, backup if specified, and then
	# delete.
	for _sector in "${_sector_array[@]}"; do
		(( _save > 0 )) && cp "$_sector" "${_bakdir}/"
		rm -v "${_sector}" >> "${AVORION_SERVICEDIR}/${_tmuxsess}/sectorremoval-${EDATE}.log"
		if [[ -f "${_sector}v" ]]; then
			rm "${_sector}v" >> "${AVORION_SERVICEDIR}/${_tmuxsess}/sectorremoval-${EDATE}.log"
		fi
	done
	echo Done
	echo "Logfile: ${AVORION_SERVICEDIR}/${_tmuxsess}/sectorremoval-${EDATE}.log"
}

# void __show_service_instances <void>
#	Locate and verify current online and offline
#	instances. Then, print them (formatted) to the screen
#	and exit
function __show_service_instances () {
	if ! [[ -f "${AVORION_SERVICEDIR}/${AVORION_BINDIR}/bin/AvorionServer" ]]; then
		die "Avorion binary not found at <${AVORION_SERVICEDIR}/${AVORION_BINDIR}/bin/AvorionServer>"
	fi

	local __inst __dir
	local __padlimit=80
	local __pad="$(printf '%*s' "$__padlimit")"
	local __padlength=30
	local __strstat=Status
	local __strinst=Galaxy
	local __strserv __status __color
	local __version="$( ${AVORION_SERVICEDIR}/${AVORION_BINDIR}/bin/AvorionServer --version )"


	if [[ -z "${__version}" ]]; then
		die "Avorion binary <${AVORION_SERVICEDIR}/${AVORION_BINDIR}/bin/AvorionServer> didnt return version info (received empty response)"
	fi

	if (( $(find "${AVORION_SERVICEDIR}"/* -maxdepth 1 -name 'server.ini' -printf . | wc -c) < 1 )); then 
		echo "No galaxies are configured in <$AVORION_SERVICEDIR>"
		exit 0
	fi

	## Padded output modified from StackExchange
	## 		https://stackoverflow.com/questions/4409399/padding-characters-in-printf
	printf "${__f_white}Avorion Commander v%s\n\n" "$CMDVERS" 
	printf "${__f_white}Service Location: %s\n" "$AVORION_SERVICEDIR/<galaxy>"
	printf "${__f_white}Backups Location: %s\n" "$AVORION_BAKDIR"
	printf "${__f_white}Avorion Version:  %s\n" "$__version"
	printf '\n'
	printf "${__f_black}${__b_white}${__strinst}%*.*s%s     ${__t_clear}\n" 0 $(( __padlength - ${#__strinst} )) \
		"${__pad}" \
		"${__strstat}"

	find "${AVORION_SERVICEDIR}"/* -maxdepth 1 -name 'server.ini' -printf '%h\n' | while read -r __dir; do
		__inst="$(basename "$__dir")"
		__strserv="${__inst}"

		if systemctl status --no-pager avorion@"$__inst".service >/dev/null 2>&1; then
			__status="ONLINE "
			__color="$__f_green"
		else
			__status="OFFLINE"
			__color="$__f_red"
		fi
		__status="[ ${__color}${__status}${__t_clear} ]"
		
		## More formatted output
		printf "${__f_white}${__strserv}"
		printf '%*.*s' 0 $(( __padlength - ${#__strserv} )) "$__pad"
		printf "${__t_clear}${__status}%s${__t_clear}\n"
	done
}

# bool __check_screen_tmux (void)
#	Return true if we are in a screen/tmux session, otherwise
#	return false.
function __check_screen_tmux () {
	# Skip this if --no-screen-enforce is passed
	(( NOSCREENCHECK > 0 )) && return 1

	# Die if we are running in a screen or tmux session.
	if [[ -n "$TMUX" ]] || [[ "$TERM" =~ ^(screen|tmux) ]] || [[ -n "$TMUX_PANE" ]] || [[ -n "$STY" ]]; then
		return 0
	fi

	return 1
}

function main () {
	# Die if there are no arguments passed
	(( $# < 1 )) &&\
		die "Usage: $CMDNAME <options> <parameters>"

	__validate_setting_conf && source /etc/avorionsettings.conf
	__assert_valid_execution

	# Check for the existence of the given strings in the positional
	# parameter list. If they exist, remove it from said parameter
	# list and continue execution after setting the requisite vars.
	for _arg; do
		shift

		case "$_arg" in
			--debug) VERBOSE=1; continue ;;
			--allow-screen) NOSCREENCHECK=1; continue ;;
			--cron) CRON=1; continue ;;
			--attach) DOATTACH=1; continue ;;
			+all) 
				DOALL=1
				__units=( $(systemctl list-units 'avorion@*' --no-pager | grep -o "$__unit_string" | awk '{print $1}') )
				dbgsay "$__units"
				__allowed='stop|restart|exec:is not usable with <+all>'
				continue
				;;
			+kill)
				DOKILL=1
				__allowed='stop|restart:is not usable with <+kill>'
				continue
		esac

		set -- "$@" "${_arg}"
	done

	local __err_bad_inst='Invalid galaxy passed:'

	if [[ -n "$__allowed" ]]; then
		if [[ ! "$1" =~ ^${__allowed%%:*}$ ]]; then
			die "<$1> ${__allowed##*:}"
		fi
	fi

	case "$1" in
		start )
			__set_tmux_instance --skip-active-check "$2" ||\
				die "${__err_bad_inst} <$2>"

			__start_avorion_instance "$_tmuxsess" ||\
				exit 1 &&\
				exit 0
			;;

		stop )
			if (( DOALL < 1 )); then
				__set_tmux_instance "$2" ||\
					die "${__err_bad_inst} <$2>"

				__stop_avorion_instance "$_tmuxsess" &&\
					exit 0

				exit 1
			fi
			
			# If there were any active instances, stop them.
			if (( "${#__units[@]}" > 0 )); then
				for __inst in "${__units[@]}"; do
					__inst="${__inst%%.service}"
					__inst="${__inst##avorion@}"
					__stop_avorion_instance "${__inst}"
				done
			fi
			;;

		restart )
			if (( DOALL < 1 )); then
				__set_tmux_instance "$2" ||\
					die "${__err_bad_inst} <$2>"

				__restart_avorion_instance "$_tmuxsess" &&\
					exit 0

				exit 1
			fi
			
			# If there were any active instances, stop them.
			if (( "${#__units[@]}" > 0 )); then
				for __inst in "${__units[@]}"; do
					__inst="${__inst%%.service}"
					__inst="${__inst##avorion@}"
					__restart_avorion_instance "${__inst}"
				done
			fi
			;;
		
		view | attach )
			__check_screen_tmux &&\
				die "$CMDNAME $1 should not be run in a screen or tmux session"

			__set_tmux_instance "$2" \
				|| die "${__err_bad_inst} <$2>"

			"$_tmuxcmd" -f "${_tmuxconf}" -S "$_tmuxsock" attach -r ||\
				exit 1 &&\
				exit 0
			;;
		
		exec )
				if (( DOALL < 1 )); then
					__set_tmux_instance "$2" \
						|| die "${__err_bad_inst} <$2>"
					
					if (( DOATTACH > 0 )); then
						__check_screen_tmux &&\
							die "$CMDNAME exec should not be run in a screen or tmux session when --attach is used (use --allow-screen to force enable)"
					fi

					shift; shift
					__sendcmd_avorion_instance "$@"
					exit 0
				fi

				shift
				## Send to any active instances
				if (( "${#__units[@]}" > 0 )); then
					for __inst in "${__units[@]}"; do
						__inst="${__inst%%.service}"
						__inst="${__inst##avorion@}"
						__set_tmux_instance "$__inst"
						__sendcmd_avorion_instance "$@"
					done
				fi
				exit 0
			;;
		
		version | -V | --version )
			echo "$CMDNAME v$CMDVERS"
			exit 0
			;;

		update )
			__perform_update ||\
				exit 1 &&\
				exit 0
			;;

		downloadupdate )
			#die "Not complete"
			__perform_update --auto ||\
				exit 1 &&\
				exit 0
			;;
		
		showinstances | -I | status)
			__show_service_instances ||\
				exit 1 &&\
				exit 0
			;;

		resetsectors )
			__set_tmux_instance "$2" --skip-active-check ||\
				die "${__err_bad_inst} <$2>"

			if ! [[ -d "$AVORION_SERVICEDIR/$_tmuxsess/sectors" ]]; then
				echo "Instance $_tmuxsess has no sectors."
				exit 1
			fi

			shift; shift
			
			for _secarg; do
				# Regex to match the following cases: x:y, or 
				# x1:y1-x2:y2 while supporting negatives.
				[[ "$_secarg" =~ ${_regex_sector_arg} ]] ||\
					die "Invalid Sector Parameter: <${_secarg}>"
			done

			__perform_sector_reset "$@" ||\
				exit 1 &&\
				exit 0
			;;

		usage | --usage | -u )
			say "Avorion Manager v${CMDVERS}"
			say "Usage: ${CMDNAME} <command> <optons> <parameters>"
			exit 0
			;;

		--help | help | -h )
			cat << _EOF_
Avorion Commander v${CMDVERS}
Usage: ${CMDNAME} <command> <options> <parameters>

Options:
	--allow-screen
		Permit the usage of commands that would normally prevent
		execution upon detection of an active (and attached) local
		screen or tmux session.

	--debug
		Output various debug output to stdout when given

	--attach
		Attempt to attach to a galaxy nstance following processing
		the primary command given. For use with "$CMDNAME exec"

	--cron
		Suppress stdout and assume yes to all user prompts. For use with
		cronjobs. 
	
	+all
		Run command on **all** instances that a given command is able to
		operate on. For now, only allowed on stop, restart, and exec.
	
	+kill
		When stopping an Avorion galaxy, rather than waiting for it to exit
		gracefully, just kill the process. Only usable with stop and restart.

Commands:
	status showinstances --instances -I
		${CMDNAME} <showinstances|--instances|-I>
		Display a listing of all Avorion Galaxies in the service directory

	help --help -h
		${CMDNAME} <help|--help|-h>
		This help text
	
	usage --usage -u
		${CMDNAME} <usage|--usage|-u>
		Print the usage text
	
	version --version -V
		${CMDNAME} <version|--version|-V>
		Print versioning information
	
	start
		${CMDNAME} start <galaxy>
		Start the given Avorion galaxy instance
	
	restart
		${CMDNAME} restart <galaxy>
		Restart the given galaxy
	
	stop
		${CMDNAME} stop <galaxy>
		Stop the given galaxy instance. Unlike when used in game, this will
		prevent the game from restarting following the 30 second window.
		Use this when configuration changes need to be made.
	
	exec
		${CMDNAME} exec <galaxy> <commands>
		Pass the given commands into the galaxy instance server session.

	resetsectors
		${CMDNAME} resetsectors <galaxy> <x:y, ...>
		${CMDNAME} resetsectors <galaxy> <x:x-y:y>
		Reset the given sectors or range of sectors.

	update
		${CMDNAME} update
		Force a server update to the latest version. Also prompts the
		user to check for mod version conflicts if any modded galaxies
		are found.

	downloadupdate
		${CMDNAME} downloadupdate
		Download the newest update for Avorion (if there is one) and
		check for mod incompatibilies. Does *not* replace the currect
		Avorion binary with the new update, but leaves the update to
		be installed on the next restart should there be no issues
		found during the update process.

		This command is intended for service use **only** but is left
		here for debug purposes. Please bear in mind that this command
		may not work for you, for this reason.
_EOF_
			exit 0
			;;

		-V | --version )
			echo "${CMDVERS}"
			exit 0
			;;

		* )
			printf '%s\n' "Invalid argument passed: <$1>"
			exit 1
			;;
	esac
}

#@@@@@@@@@@@#
# Utilities #
#@@@@@@@@@@@#

# int __compare_version_string (str $1, str $2)
#	Determine whether or not the version string $1 is either a later
#	or matching revision to string $2. Returns true if so, and false if
#	otherwise.
#
#	Options:
#		--warn	Displays various warnings regarding why
#		a string may have failed, or if there is amgiguity regarding
#		its version matching (eg: Wildcards)
function __compare_version_string () {
	local __do_warn=0

	for __arg; do
		shift
		if [[ "$__arg" == "--warn" ]]; then
			__do_warn=1
			continue
		fi
		set -- "$@" "$__arg"
	done

	(( $# < 2 )) &&\
		die "Syntax error in __compare_version_string: Not enough arguments" 1>&2

	(( $# > 2 )) &&\
		die "Syntax error in __compare_version_string: Too many arguments" 1>&2
	
	local -a __checkstr_arr __basestr_arr
	local __check __base
	local __checkstr="$1"
	local __basestr="$2"
	local __pass=1
	local __warn=0
	local __diff=0
	
	dbgsay "Is $__checkstr >= $__basestr"

	## Prevent * from breaking everything by replacing those with
	## '?' characters. (* will expand into filenames, ? will not.)
	__checkstr="${__checkstr//\*/?}"
	__basestr="${__basestr//\*/?}"

	## Not the most ideal way of doing this, but it is reasonably safe
	## given our inputs. All these are doing is turning those strings
	## into arrays with the delimiter being the "."
	for n in ${__checkstr//./ }; do
		__checkstr_arr+=( "$n" )
	done
	for n in ${__basestr//./ }; do
		__basestr_arr+=( "$n" )
	done
	
	## Start looping on the array contents, using the "__basestr__arr"  
	## array as the base.
	for i in "${!__basestr_arr[@]}"; do
		__base="${__basestr_arr[$i]}"
		__check="${__checkstr_arr[$i]}"
		
		## If one of the versions is a wildcard, then we don't need to
		## continue past this point. Check is successful, but note the
		## warning that is set for when verbose output is enabled.
		if [[ "$__check" == '?' ]] || [[ "$__base" == '?' ]]; then
			__warn=1
			break

		## If one of the strings is exmpty, we've reached the end of this
		## version string and can stop. Check is considered successful.
		elif [[ -z "$__check" ]] || [[ -z "$__base" ]]; then
			__warn=2
			break
		fi
		
		## If the base version string ($2) is less than the version we are
		## checking ($1), break.
		if (( __base < __check )); then
			__diff="$(( __check - __base ))"
			break
		
		## Version substring matches, so continue
		elif (( __base == __check )); then
			continue
	
		## If the base version string ($2) is **higher** then the version
		## we are checking, then the check is considered a fail, and we stop.
		## 
		## At this point, we return 1 to indicate failure
		elif (( __base > __check )); then
			dbgsay "Cause: $__base > $__check"
			return 1
		fi
	done
	
	## When verbose error output is enabled, we want to output the following to
	## standard output. Note that the string refernces below are replacing '?' with '*'
	## Also note that the following only outputs on a successful run.
	if (( __do_warn > 0 )); then
		case "$__warn" in
			#1) printf "${__f_yellow}Wildcard version string is in use: <%s>${__t_clear}\n" "${__checkstr//\?/*}" ;;
			2) printf "${__f_yellow}Version string missing latest point release: <%s>${__t_clear}\n" "${__checkstr//\?/*}" ;;
		esac
	
		if (( __diff > 5 )); then
			printf "${__f_yellow}Passing point release is <%s> version$(plural "$__diff") higher than current update. Mod version: <%s>${__t_clear}\n" \
				"$__diff" \
				"${__checkstr//\?/*}"
		fi    
	fi

	return 0
}

main "$@"